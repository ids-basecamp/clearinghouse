name: Release
on:
  push:
    branches:
      - master
      - alpha
      - beta
jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new_tag_version: ${{ steps.tag_version.outputs.new_tag_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Dry run to get the next release version
        id: tag_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export NEXT_TAG_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:alnum:].\-]+)$/\1/')
          echo "new_tag_version=${NEXT_TAG_VERSION}" >> $GITHUB_OUTPUT
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  
  publish-ch-app:
    needs: release
    if: ${{ needs.release.outputs.new_tag_version != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        env:
          DOCKER_IMAGE_TAG: ${{ needs.release.outputs.new_tag_version }}
        run: cd clearing-house-app && docker build -t ghcr.io/truzzt/ids-basecamp-clearing/ch-app:$DOCKER_IMAGE_TAG .

      - name: Push Docker image
        env:
          DOCKER_IMAGE_TAG: ${{ needs.release.outputs.new_tag_version }}
        run: docker push ghcr.io/truzzt/ids-basecamp-clearing/ch-app:$DOCKER_IMAGE_TAG

  publish-ch-edc:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.new_tag_version != '' }}
    defaults:
        run:
          working-directory: ./clearing-house-edc
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project extensions
        run: ./gradlew clean build

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.6.0
        with:
          cosign-release: 'v1.13.1'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ./clearing-house-edc/launchers/connector-prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ needs.release.outputs.new_tag_version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          secrets: |
            "gpc=gpr.user=${{ github.actor }}
            gpr.key=${{ secrets.GITHUB_TOKEN }}"

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ needs.release.outputs.new_tag_version }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
